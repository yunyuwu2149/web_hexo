{"title":"C语言笔记（2）基本语法","uid":"9fe0d1f058dbe1b450961fecd0540c53","slug":"C语言笔记（2）基本语法","date":"2023-04-24T17:03:13.000Z","updated":"2023-04-26T06:19:36.332Z","comments":true,"path":"api/articles/C语言笔记（2）基本语法.json","keywords":null,"cover":"https://img1.imgtp.com/2023/04/25/onmIdjZM.jpg","content":"<h1 id=\"C语言的结构\"><a href=\"#C语言的结构\" class=\"headerlink\" title=\"C语言的结构\"></a>C语言的结构</h1><p>一个C语言程序由若干个<code>头文件</code>与多个<code>函数</code>构成,每个函数有自己的功能,例如</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">#include &lt;stdio.h&gt; &#x2F;&#x2F;stdio.h就是头文件\n\nint main(void) &#123;    &#x2F;&#x2F;从int到结尾这是主函数\n  printf(&quot;Hello World\\n&quot;);\n  return 0;\n&#125;\n</code></pre>\n\n<ul>\n<li><code>#include &lt;stdio.h&gt;</code>是一条预处理命令, 预处理(或称预编译)是指在进行编译的第一遍扫描(词法扫描和语法分析)之前所作的工作。</li>\n<li><code>函数</code>我<strong>个人理解</strong>为就是一小块写好的<strong>代码</strong>，是实现代码逻辑的一个小的<strong>单元</strong>。</li>\n</ul>\n<h2 id=\"主函数\"><a href=\"#主函数\" class=\"headerlink\" title=\"主函数\"></a>主函数</h2><p>这里有一个主函数，主函数他是必不可少的,<strong>一个C程序有且只有一个主函数</strong>，即<code>main函数</code>。在最新的C标准中，main函数前的类型为int而不是void。</p>\n<ul>\n<li>C程序就是执行主函数里的代码，也可以说这个主函数就是C语言中的唯一入口。</li>\n<li>main前面的int就是主函数的类型。</li>\n<li><code>printf()</code>是格式输出函数，它的作用就是在屏幕上输出指定的消息。</li>\n<li><code>return</code>是函数的返回值，不同的函数会返回不同的值。</li>\n</ul>\n<hr>\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><p><strong>什么是关键字?</strong><br>关键字,也叫作保留字。是指一些被C语言赋予了特殊含义的单词<br><strong>关键字有什么特征？</strong></p>\n<ul>\n<li>全部都是小写</li>\n<li>在开发工具中会显示特殊颜色<br><strong>关键字需要注意什么？</strong><br>关键字注意点:<br>因为关键字在C语言中有特殊的含义, 所以不能用作常量名、变量名、函数名以及其他标识符名称。</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">关键字</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">auto</td>\n<td align=\"center\">声明自动变量</td>\n</tr>\n<tr>\n<td align=\"center\">break</td>\n<td align=\"center\">跳出当前循环</td>\n</tr>\n<tr>\n<td align=\"center\">case</td>\n<td align=\"center\">开关语句分支</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">声明字符型变量或函数返回值类型</td>\n</tr>\n<tr>\n<td align=\"center\">const</td>\n<td align=\"center\">定义变量，如果一个变量被const修饰，那么它的值就不能再被改变，叫做常量</td>\n</tr>\n<tr>\n<td align=\"center\">continue</td>\n<td align=\"center\">结束当前循环，开始下一轮循环</td>\n</tr>\n<tr>\n<td align=\"center\">default</td>\n<td align=\"center\">开关语句中的“其他分支”</td>\n</tr>\n<tr>\n<td align=\"center\">do</td>\n<td align=\"center\">循环语句的循环体</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">声明双精度浮点型变量或函数返回值类型</td>\n</tr>\n<tr>\n<td align=\"center\">else</td>\n<td align=\"center\">条件语句否定分支（与if连用）</td>\n</tr>\n<tr>\n<td align=\"center\">enum</td>\n<td align=\"center\">声明枚举类型</td>\n</tr>\n<tr>\n<td align=\"center\">exterm</td>\n<td align=\"center\">声明变量或函数是在其他文件或本文件的其他位置定义</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">声明浮点型变量或函数返回值类型</td>\n</tr>\n<tr>\n<td align=\"center\">for</td>\n<td align=\"center\">一种循环语句</td>\n</tr>\n<tr>\n<td align=\"center\">goto</td>\n<td align=\"center\">无条件跳转语句</td>\n</tr>\n<tr>\n<td align=\"center\">if</td>\n<td align=\"center\">条件语句</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">声明整型变量或函数</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">声明长整型变量或函数返回值类型</td>\n</tr>\n<tr>\n<td align=\"center\">register</td>\n<td align=\"center\">声明寄存器变量</td>\n</tr>\n<tr>\n<td align=\"center\">return</td>\n<td align=\"center\">子程序返回语句（可以带参数，也可不带参数）</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">声明短整形变量或函数</td>\n</tr>\n<tr>\n<td align=\"center\">signed</td>\n<td align=\"center\">声明又符号类型变量或函数</td>\n</tr>\n<tr>\n<td align=\"center\">sizeof</td>\n<td align=\"center\">计算数据类型或变量长度（即所占字节数）</td>\n</tr>\n<tr>\n<td align=\"center\">static</td>\n<td align=\"center\">声明静态变量</td>\n</tr>\n<tr>\n<td align=\"center\">struct</td>\n<td align=\"center\">声明结构体类型</td>\n</tr>\n<tr>\n<td align=\"center\">switch</td>\n<td align=\"center\">用于开关语句</td>\n</tr>\n<tr>\n<td align=\"center\">typedef</td>\n<td align=\"center\">用以给数据类型取别名</td>\n</tr>\n<tr>\n<td align=\"center\">unsigned</td>\n<td align=\"center\">声明无符号类型变量或函数</td>\n</tr>\n<tr>\n<td align=\"center\">union</td>\n<td align=\"center\">声明共用体类型</td>\n</tr>\n<tr>\n<td align=\"center\">void</td>\n<td align=\"center\">声明函数无返回值或无参数，声明无类型指针</td>\n</tr>\n<tr>\n<td align=\"center\">volatile</td>\n<td align=\"center\">说明变量在程序执行中可被隐含地改变</td>\n</tr>\n<tr>\n<td align=\"center\">while</td>\n<td align=\"center\">循环语句的循环条件</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://image.yunyuwu.cn/typecho/uploads/2022/01/2576143624.png\" alt=\"3f73cc45cf0a0bb4e4f0f1b9c972b2be.png\"></p>\n<hr>\n<h2 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h2><p><strong>什么是标识符？</strong></p>\n<ul>\n<li>C语言由函数构成，一个C程序中会有很多个函数，为了更好的区分这些函数，所以给每一个函数起一个名字，这个名字就是标识符。</li>\n</ul>\n<p><strong>标识符的命名规则</strong></p>\n<ul>\n<li>只能由字母、数字、下划线组成</li>\n<li>第一个字符必须是字母或下划线，不能以数字开头</li>\n<li>不能是C语言中的关键字</li>\n<li>严格区分大小写字母</li>\n<li>标识符最好选择有意义的英文单词组成，不要使用拼音。</li>\n<li>标识符的长度最好不要超过8位，在某些版本中规定标识符前8位有效，如果你的两个标识符前8位相同时，就会被认为时同一个标识符。</li>\n</ul>\n<hr>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量是计算机中一块特定的内存空间由一个或多个连续的字节组成。<br><code>C语言</code>的代码由一行行语句组成。语句就是程序执行的一个操作命令。<strong>C语言规定，语句必须使用分号结尾，</strong>除非有明确规定可以不写分号。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int Number &#x3D; 1;</code></pre>\n\n<hr>\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><p>C语言的代码由一行行语句组成。语句是程序执行的一个操作命令。每个语句必须使用分号结尾，除非由明确规定可以不写分号。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int Number &#x3D; 1;</code></pre>\n\n<p>这就是一个变量声明语句，声明整形变量<code>Number</code>，并给他赋值为1。<br>同一行可以写多个语句，换行只是方便阅读，并不是必须的。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int Number;Number &#x3D; 1;</code></pre>\n\n<p>一个语句也可以写在很多行，这个时候就需要依靠分号来判断语句是在哪一行结束的。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int Number;\nNumber\n&#x3D;\n1\n;</code></pre>\n\n<p>在这里编译器在编译时会自动忽略代码中的换行。<br>单个分号也是一个有效语句，被称为“空语句”，但是他毫无作用。</p>\n<hr>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>C语言的计算是通过<strong>表达式</strong>完成的。表达式是一个计算式，用来获取值。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">1+2</code></pre>\n\n<p>在这个地方的1+2就是一个表达式，用来获取<code>1+2</code>这个算术的计算结果。<br>在表达式后加上分号，也是语句，但是没有作用。<br>表达式与语句的主要区别：</p>\n<ul>\n<li>语句包含表达式，但是表达式本身不构成语句</li>\n<li>表达式都是又返回值的，语句不一定有。语句是用来执行命令的，一般不需要返回值。<br>##语句块（函数体）<br>C语言允许多个语句使用一对大括号{}，组成一个块，也称为复合语句。在语法上，语句块可以视为多个语句组成的一个复合语句。它使用大括号把许多语句和声明组合到一起，形成单条语句。</li>\n</ul>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">&#123;\n    int Number;\n    Number &#x3D; 1;\n&#125;</code></pre>\n\n<p>上面中一个大括号（花括号）形成了一个语句块，大括号的结尾不需要添加分号。</p>\n<h2 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h2><p>C语言中的空格主要是用来帮助编译器区分语法单位的。如果语法单位不需要空格就可以被区分，那么就不需要空格，只是为了让程序员更容易观看，增加可读性。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int Number &#x3D; 1;\n&#x2F;&#x2F; 等于\nint Number&#x3D;1;</code></pre>\n\n<p>在代码中，语法单位之间的多个空格等于一个空格。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int Number    &#x3D;       1;</code></pre>\n\n<p>空格还可以用来表示缩进，一般情况下一级代码比上一级代码缩进四个空格。<br>只有空格的一行代码被称为空白行，编译器会直接忽略掉这行代码。</p>\n<hr>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>注释是对代码进行解释说明，编译器不会读取，只是给程序员看的。<br>C语言有两种注释方法，第一种：</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">&#x2F;*这是一段注释*&#x2F;\n&#x2F;*\n    被他包含起来就可以\n*&#x2F;</code></pre>\n\n<p>这是第一种注释，他可以穿插在代码行中</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int Number&#x2F;*这是注释*&#x2F; &#x3D; 1；</code></pre>\n\n<p>第二种：</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">&#x2F;&#x2F; 这是第二种注释\nint Number &#x3D; 1;</code></pre>\n\n<p>第二种注释是将注释内容放到<code>//</code>的后面，从双斜杠后面一直到这一行结束都属于注释。可以将他放到第一行或者某一行的行尾。<br><strong>不管是哪种注释都不能放到双引号<code>&quot;&quot;</code>里</strong>编译器在编译时，会将双引号里的注释字符视为普通字符，不存在注释的作用。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">#include&lt;stdio.h&gt;\nint main()\n&#123;\n\tprintf(&quot;&#x2F;*我是注释*&#x2F;Hello,world&quot;);\n\treturn 0;\n&#125;</code></pre>\n\n<p>这段代码编译后运行，会输出:</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">&#x2F;*我是注释*&#x2F;Hello,world</code></pre>\n\n<hr>\n<h2 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf()\"></a>printf()</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p><code>printf()</code>的作用是将指定的参数文本输出到屏幕上。printf()是在标准库的头文件stdio.h定义的。使用这个函数之前，必须在源码文件头部引入这个头文件。只有在源码头部加上<code>#include &lt;stdio.h&gt;</code>，才能使用<code>printf()</code>这个函数。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n  printf(&quot;Hello World\\n&quot;);\n&#125;</code></pre>\n\n<p>上面的命令会在屏幕上输出一行文字：<code>Hello World</code></p>\n<hr>\n<h2 id=\"占位符\"><a href=\"#占位符\" class=\"headerlink\" title=\"占位符\"></a>占位符</h2><p><code>printf()</code>可以在输出的文本中指定占位符。占位符就是先占住一个固定的位置，等着你再往里面添加内容的符号。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">&#x2F;&#x2F;输出Are these 2 paragraphs?\nprintf(&quot;Are these %i paragraphs?&quot;, 2);</code></pre>\n\n<p>从这个示例看，<code>Are these %i paragraphs?</code>是输出文本，其中的<code>%i</code>就是占位符，它占住了这个位置。可以用别的值来替换，在双引号后的<code>2</code>就是要替换的值。占位符的第一个字符都是<code>%</code>，第二个字符是表示占位符的类型，这里是<code>i</code>i代表整数，是int的首字母。编译后输出的结果为：<code>Are these 2 paragraphs?</code><br>一段输出文本中可以使用很多个占位符。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">printf(&quot;My name is %s. I&#39;m %i years old&quot;, &quot;Joe&quot;, 18)</code></pre>\n\n<p>下面是常用占位符<br>• %a：浮点数。<br>• %A：浮点数。<br>• %c：字符。<br>• %d：十进制整数。<br>• %e：使用科学计数法的浮点数，指数部分的e为小写。<br>• %E：使用科学计数法的浮点数，指数部分的E为大写。<br>• %i：整数，基本等同于%d。<br>• %f：小数（包含float类型和double类型）。<br>• %g：6个有效数字的浮点数。整数部分一旦超过6位，就会自动转为科学计数法，指数部分的e为小写。<br>• %G：等同于%g，唯一的区别是指数部分的E为大写。<br>• %hd：十进制 short int 类型。<br>• %ho：八进制 short int 类型。<br>• %hx：十六进制 short int 类型。<br>• %hu：unsigned short int 类型。<br>• %ld：十进制 long int 类型。<br>• %lo：八进制 long int 类型。<br>• %lx：十六进制 long int 类型。<br>• %lu：unsigned long int 类型。<br>• %lld：十进制 long long int 类型。<br>• %llo：八进制 long long int 类型。<br>• %llx：十六进制 long long int 类型。<br>• %llu：unsigned long long int 类型。<br>• %Le：科学计数法表示的 long double 类型浮点数。<br>• %Lf：long double 类型浮点数。<br>• %n：已输出的字符串数量。该占位符本身不输出，只将值存储在指定变量之中。<br>• %o：八进制整数。<br>• %p：指针。<br>• %s：字符串。<br>• %u：无符号整数（unsigned int）。<br>• %x：十六进制整数。<br>• %zd：size_t类型。<br>• %%：输出一个百分号。</p>\n<hr>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p><code>printf()</code>可以定制占位符的输出格式</p>\n<h4 id=\"（1）限定宽度\"><a href=\"#（1）限定宽度\" class=\"headerlink\" title=\"（1）限定宽度\"></a>（1）限定宽度</h4><p><code>printf</code>允许限定占位符的最小宽度。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">printf(&quot;%5d\\n&quot;, 123); &#x2F;&#x2F; 输出为 &quot;  123&quot;</code></pre>\n\n<p>在上面的示例中，<code>%5d</code>表示这个占位符的宽度最少是5位，如果不满的话，对应的值也就是<code>123</code>会添加空格补齐。<br>输出的值默认是<strong>右对齐</strong>，如果希望改成左对齐，需要在占位符<code>%</code>的后面家一个<code>-</code>号。<br>printf(“%-5d\\n”, 123); &#x2F;&#x2F; 输出为 “123  “<br>上边的示例中，输出内容<code>123</code>后边会加两个空格，因为他是左对齐。<br>如果你输出的是小数的话，这个字符会限制所有数字的最小显示宽度。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">&#x2F;&#x2F; 输出 &quot;  123.450000&quot;\nprintf(&quot;%12f\\n&quot;, 123.45);</code></pre>\n\n<p>上面示例中，%12f表示输出的浮点数最少要占据12位。由于小数的默认显示精度是小数点后6位，所以123.45输出结果的头部会添加2个空格。</p>\n<h4 id=\"（2）总是显示正负号\"><a href=\"#（2）总是显示正负号\" class=\"headerlink\" title=\"（2）总是显示正负号\"></a>（2）总是显示正负号</h4><p>默认情况下，<code>printf()</code>正数不显示+号，只对负数显示-号。如果想让正数也&#96;&#96;&#96;输出+号，可以在占位符的%后面加一个+。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">printf(&quot;%+d\\n&quot;, 12); &#x2F;&#x2F; 输出 +12\nprintf(&quot;%+d\\n&quot;, -12); &#x2F;&#x2F; 输出 -12</code></pre>\n\n<p>上面示例中，<code>%+d</code>可以确保输出的数值总是带有正负号。</p>\n<h4 id=\"（3）限定小数位数\"><a href=\"#（3）限定小数位数\" class=\"headerlink\" title=\"（3）限定小数位数\"></a>（3）限定小数位数</h4><p>输出小数时，有时希望限定小数的位数。举例来说，希望小数点后面只保留两位，占位符可以写成<code>%.2f</code>。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">&#x2F;&#x2F; 输出 Number is 0.50\nprintf(&quot;Number is %.2f\\n&quot;, 0.5);</code></pre>\n\n<p>上面示例中，如果希望小数点后面输出3位（<code>0.500</code>），占位符就要写成<code>%.3f</code>。</p>\n<h4 id=\"（4）输出部分字符串\"><a href=\"#（4）输出部分字符串\" class=\"headerlink\" title=\"（4）输出部分字符串\"></a>（4）输出部分字符串</h4><p><code>%s</code>占位符用来输出字符串，默认是全部输出。如果只想输出开头的部分，可以用<code>%.[m]s</code>指定输出的长度，其中<code>[m]</code>代表一个数字，表示所要输出的长度。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">&#x2F;&#x2F; 输出 hello\nprintf(&quot;%.5s\\n&quot;, &quot;hello world&quot;);</code></pre>\n\n<p>上面示例中，占位符<code>%.5s</code>表示只输出字符串“hello world”的前5个字符，即“hello”。</p>\n<hr>\n<h2 id=\"标准库、头文件\"><a href=\"#标准库、头文件\" class=\"headerlink\" title=\"标准库、头文件\"></a>标准库、头文件</h2><p>在C程序的编写过程中，有些功能不一定非要自己写，C语言本身已经自带了不少了，我们只要直接调用就好了。比如最常用到的<code>printf()</code>这个函数就是C语言自带的。<br>C语言自带的所有这些功能，都统称为“标准库”，因为他们是写入标准的，都是被规定好的。这样保证了代码的规范性和可移植性。<br>不同的功能定义在不同的文件里，这些文件被叫做“头文件”。如果系统自带某一个功能，就一定还会带描述这个功能的头文件，比如<code>printf()</code>的头文件就是系统自带的<code>stdio.h</code>头文件的后缀一般为<code>.h</code><br>如果要使用某个功能，就必须要先加载对应的<strong>头文件</strong>，加载使用的命令是<code>#include</code>。这就是我们为什么要在使用<code>printf()</code>之前，必须先要加载<code>stdio.h</code>的原因了。</p>\n","text":"C语言的结构一个C语言程序由若干个头文件与多个函数构成,每个函数有自己的功能,例如 #include &lt;stdio.h&gt; &#x2F;&#x2F;stdio.h就是头文件 int main(void) &#123; &#x2F;&#x2F;从int到结尾这是主函数 p...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"Note","slug":"Note","count":16,"path":"api/categories/Note.json"},{"name":"c语言","slug":"Note/c语言","count":7,"path":"api/categories/Note/c语言.json"}],"tags":[{"name":"Note","slug":"Note","count":14,"path":"api/tags/Note.json"},{"name":"c语言","slug":"c语言","count":7,"path":"api/tags/c语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">C语言的结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">主函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">关键字</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">标识符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">表达式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\">空格</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">注释</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#printf\"><span class=\"toc-text\">printf()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">基本用法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%A0%E4%BD%8D%E7%AC%A6\"><span class=\"toc-text\">占位符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输出格式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E9%99%90%E5%AE%9A%E5%AE%BD%E5%BA%A6\"><span class=\"toc-text\">（1）限定宽度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E6%80%BB%E6%98%AF%E6%98%BE%E7%A4%BA%E6%AD%A3%E8%B4%9F%E5%8F%B7\"><span class=\"toc-text\">（2）总是显示正负号</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89%E9%99%90%E5%AE%9A%E5%B0%8F%E6%95%B0%E4%BD%8D%E6%95%B0\"><span class=\"toc-text\">（3）限定小数位数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%884%EF%BC%89%E8%BE%93%E5%87%BA%E9%83%A8%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">（4）输出部分字符串</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%87%E5%87%86%E5%BA%93%E3%80%81%E5%A4%B4%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">标准库、头文件</span></a></li></ol></li></ol>","author":{"name":"小北","slug":"blog-author","avatar":"https://q1.qlogo.cn/g?b=qq&nk=2149264593&s=640","link":"/","description":"云起云散雾不止 <br /> @ <b>公众号：云与雾科技</b>","socials":{"github":"https://github.com/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/","customs":{}}},"mapped":true,"prev_post":{"title":"vscode配置c语言环境","uid":"6adf066132135f079fa836f0cde19524","slug":"vscode配置c语言环境","date":"2023-04-25T14:41:49.840Z","updated":"2023-04-26T13:11:56.636Z","comments":true,"path":"api/articles/vscode配置c语言环境.json","keywords":null,"cover":"https://img1.imgtp.com/2023/04/25/ZWyyujZo.jpg","text":"开篇昨晚上一不小心给电脑整坏了，无奈之下就重装了系统。装完系统之后最麻烦的当然就是所有学习资料的安装恢复了。这样的工作对我这种记忆力不大好的“老年人”极度不友好！可是这又有什么办法呢，找到了我在云盘的学习资料后，当然是安装对应的工具了。我首先选择恢复的是vscode这款神器，我感...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"Note","slug":"Note","count":16,"path":"api/categories/Note.json"},{"name":"c语言","slug":"Note/c语言","count":7,"path":"api/categories/Note/c语言.json"}],"tags":[{"name":"Note","slug":"Note","count":14,"path":"api/tags/Note.json"},{"name":"c语言","slug":"c语言","count":7,"path":"api/tags/c语言.json"}],"author":{"name":"小北","slug":"blog-author","avatar":"https://q1.qlogo.cn/g?b=qq&nk=2149264593&s=640","link":"/","description":"云起云散雾不止 <br /> @ <b>公众号：云与雾科技</b>","socials":{"github":"https://github.com/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/","customs":{}}}},"next_post":{}}