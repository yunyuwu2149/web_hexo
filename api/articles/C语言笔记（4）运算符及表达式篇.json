{"title":"C语言笔记（4）运算符及表达式篇","uid":"20593d7604e98581ff324049fd7dd8b3","slug":"C语言笔记（4）运算符及表达式篇","date":"2023-04-26T02:02:26.000Z","updated":"2023-04-26T06:19:36.344Z","comments":true,"path":"api/articles/C语言笔记（4）运算符及表达式篇.json","keywords":null,"cover":"https://img1.imgtp.com/2023/04/26/BBICbuKd.jpg","content":"<h2 id=\"一、表达式\"><a href=\"#一、表达式\" class=\"headerlink\" title=\"一、表达式\"></a>一、表达式</h2><h3 id=\"1-表达式是什么\"><a href=\"#1-表达式是什么\" class=\"headerlink\" title=\"1.表达式是什么\"></a>1.表达式是什么</h3><p>一个或多个<code>运算对象</code>与零个或多个<code>运算符</code>组成的式子叫做<code>表达式</code>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>每个表达式都有一个结果</p></blockquote>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">printf(&quot;%d\\n&quot; 5+10);\t&#x2F;&#x2F;表达式结果为：15</code></pre>\n\n\n\n<h3 id=\"2-表达式语句\"><a href=\"#2-表达式语句\" class=\"headerlink\" title=\"2.表达式语句\"></a>2.表达式语句</h3><p>在表达式后边加上<code>;</code>就构成了表达式语句，C语言中表达式不能单独存在，必须以表达式语句的方式存在。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">100;\n5+10;\na&#x2F;b;\na*10&#x2F;b+c;</code></pre>\n\n\n\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">printf(&quot;%d\\n&quot; 5+10);\t&#x2F;&#x2F;5+10表达式为什么后边没有;号，是因为5+10在这个语句中是函数调用表达式的子表达式。</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>函数名加括号运算符构成了一个函数表达式。</p></blockquote>\n<h2 id=\"二、运算符\"><a href=\"#二、运算符\" class=\"headerlink\" title=\"二、运算符\"></a>二、运算符</h2><p>在C语言中，运算符有非常的多。它内置的运算符丰富到令人头皮发麻，但同时给了我们对代码的更多操作性。</p>\n<ul>\n<li>算术运算符</li>\n<li>关系运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n<li>赋值运算符</li>\n<li>杂项运算符</li>\n</ul>\n<h3 id=\"1-算术运算符\"><a href=\"#1-算术运算符\" class=\"headerlink\" title=\"1.算术运算符\"></a>1.算术运算符</h3><p>算术运算符专门用于算术运算，主要有下面几种。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一元运算符指的是只有一个运算对象，反之，二元运算符是指有两个运算对象。</p></blockquote>\n<ul>\n<li><code>+</code>：正值运算符（一元运算符）</li>\n<li><code>-</code>：负值运算符（一元运算符）</li>\n<li><code>+</code>：加法运算符（二元运算符）</li>\n<li><code>-</code>：减法运算符（二元运算符）</li>\n<li><code>*</code>：乘法运算符</li>\n<li><code>/</code>：除法运算符</li>\n<li><code>%</code>：余值运算符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">运算符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">正值运算符</td>\n<td align=\"center\">+</td>\n<td align=\"center\">表示这个操作数为正数</td>\n<td align=\"center\">+12（它是+12）</td>\n</tr>\n<tr>\n<td align=\"center\">负值运算符</td>\n<td align=\"center\">-</td>\n<td align=\"center\">表示这个操作数为负数</td>\n<td align=\"center\">-12（它是-12）</td>\n</tr>\n<tr>\n<td align=\"center\">加法运算符</td>\n<td align=\"center\">+</td>\n<td align=\"center\">添加两个操作数</td>\n<td align=\"center\">2+10&#x3D;12</td>\n</tr>\n<tr>\n<td align=\"center\">减法运算符</td>\n<td align=\"center\">-</td>\n<td align=\"center\">从第一个减去第二个操作数</td>\n<td align=\"center\">12-2&#x3D;10</td>\n</tr>\n<tr>\n<td align=\"center\">自增运算符</td>\n<td align=\"center\">++</td>\n<td align=\"center\">自增运算符将整数值增加1</td>\n<td align=\"center\">int a &#x3D; 1; a++</td>\n</tr>\n<tr>\n<td align=\"center\">自减运算符</td>\n<td align=\"center\">–</td>\n<td align=\"center\">自减运算符将整数值减小1</td>\n<td align=\"center\">int a &#x3D; 1; a–</td>\n</tr>\n<tr>\n<td align=\"center\">乘法运算符</td>\n<td align=\"center\">*</td>\n<td align=\"center\">将两个操作数相乘</td>\n<td align=\"center\">2*6&#x3D;12</td>\n</tr>\n<tr>\n<td align=\"center\">除法运算符</td>\n<td align=\"center\">&#x2F;</td>\n<td align=\"center\">将两个操作数相除</td>\n<td align=\"center\">12&#x2F;2&#x3D;6</td>\n</tr>\n<tr>\n<td align=\"center\">余值运算符（求余运算符）</td>\n<td align=\"center\">%</td>\n<td align=\"center\">将操作数相除后取余</td>\n<td align=\"center\">12%5&#x3D;2</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"（1）\"><a href=\"#（1）\" class=\"headerlink\" title=\"（1）+ -\"></a>（1）<code>+</code> <code>-</code></h4><p>这两个运算符既可以当做一元运算符，也可以当做二元运算符<br>所谓<code>一元运算符</code>，指的是只需要一个运算数就可以执行。一元运算符-用来改变一个值的正负号。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int num &#x3D; -1;\nint num2 &#x3D; +num;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这段代码中的<code>-</code>将<code>1</code>变为了<code>-1</code>。正号<code>+</code>对正负值没有什么影响，**<code>+</code>不会改变正负值，**可加可不加。</p></blockquote>\n<p>二元运算符<code>+</code> <code>-</code>也就是用他们来完成加减法。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int x &#x3D; 6 + 6;\nint y &#x3D; 13 - 1;</code></pre>\n\n<h4 id=\"（2）-乘法运算符\"><a href=\"#（2）-乘法运算符\" class=\"headerlink\" title=\"（2）*乘法运算符\"></a>（2）<code>*</code>乘法运算符</h4><p>运算符<code>*</code>用来完成乘法。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int num &#x3D; 2 * 6;\nprintf(&quot;%i&quot;, num); &#x2F;&#x2F; 输出12\n&#x2F;&#x2F; 或者\nint num &#x3D; 6;\nprintf(&quot;%i\\n&quot;, num * num);&#x2F;&#x2F;输出 36</code></pre>\n\n<h4 id=\"（3）-除法运算符\"><a href=\"#（3）-除法运算符\" class=\"headerlink\" title=\"（3）/除法运算符\"></a>（3）<code>/</code>除法运算符</h4><p>运算符<code>/</code>用来完成除法。注意，两个整数相除，得到还是一个整数。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">float x &#x3D; 6 &#x2F; 4;\nprintf(&quot;%f\\n&quot;, x); &#x2F;&#x2F; 输出 1.000000</code></pre>\n\n<p>上面示例中，尽管变量<code>x</code>的类型是<code>float（浮点数）</code>，但是<code>6 / 4</code>得到的结果是<code>1.0</code>，而不是<code>1.5</code>。原因就在于 <strong>C语言里面的整数除法是整除，只会返回整数部分，丢弃小数部分。</strong></p>\n<p>如果希望得到浮点数的结果，两个运算数必须至少有一个浮点数，这时 C 语言就会进行浮点数除法。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">float x &#x3D; 6.0 &#x2F; 4; &#x2F;&#x2F; 或者写成 6 &#x2F; 4.0\nprintf(&quot;%f\\n&quot;, x); &#x2F;&#x2F; 输出 1.500000</code></pre>\n\n<p>上面示例中，<code>6.0 / 4</code>表示进行浮点数除法，得到的结果就是<code>1.5</code>。</p>\n<p>小测试：</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int score &#x3D; 5;\nscore &#x3D; (score &#x2F; 20) * 100;\nprintf(&quot;%i&quot;, score);</code></pre>\n\n<p>这段代码的运行结果是什么？<br>如果你的运算结果为25，那么恭喜你，错了。回去好好再看一次笔记<br>如果你的运算结果为0，那么恭喜你，对了。继续看笔记吧。</p>\n<p>为了得到预想的结果（运算结果为25），可以将除数20改成20.0，让整除变成浮点数除法。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">score &#x3D; (score &#x2F; 20.0) * 100;</code></pre>\n\n<h4 id=\"（4）-求余运算符（取模运算符）\"><a href=\"#（4）-求余运算符（取模运算符）\" class=\"headerlink\" title=\"（4）%求余运算符（取模运算符）\"></a>（4）<code>%</code>求余运算符（取模运算符）</h4><p>运算符<code>%</code>表示求模（取余）运算，即返回两个整数相除的余值。<strong>这个运算符只能用于整数，不能用于浮点数。</strong></p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int x &#x3D; 12 % 5;\nprintf(&quot;%i&quot;, x); &#x2F;&#x2F; 2</code></pre>\n\n<p>负数求模的规则是，结果的正负号由第一个运算数的正负号决定。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">11 % -5 &#x2F;&#x2F; 1\n-11 % -5 &#x2F;&#x2F; -1\n-11 % 5 &#x2F;&#x2F; -1</code></pre>\n\n<p>上面示例中，第一个运算数的正负号（11或-11）决定了结果的正负号。</p>\n<h4 id=\"（5）赋值运算的简写形式\"><a href=\"#（5）赋值运算的简写形式\" class=\"headerlink\" title=\"（5）赋值运算的简写形式\"></a>（5）赋值运算的简写形式</h4><p>如果变量对自身的值进行算术运算，C 语言提供了简写形式，允许将赋值运算符和算术运算符结合成一个运算符。</p>\n<ul>\n<li>+&#x3D;</li>\n<li>-&#x3D;</li>\n<li>*&#x3D;</li>\n<li>&#x2F;&#x3D;</li>\n<li>%&#x3D;</li>\n</ul>\n<p>下面是一些例子。</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">i +&#x3D; 3;  &#x2F;&#x2F; 等同于 i &#x3D; i + 3\ni -&#x3D; 8;  &#x2F;&#x2F; 等同于 i &#x3D; i - 8\ni *&#x3D; 9;  &#x2F;&#x2F; 等同于 i &#x3D; i * 9\ni &#x2F;&#x3D; 2;  &#x2F;&#x2F; 等同于 i &#x3D; i &#x2F; 2\ni %&#x3D; 5;  &#x2F;&#x2F; 等同于 i &#x3D; i % 5</code></pre>\n\n<hr>\n<h2 id=\"2-自增、自减运算符\"><a href=\"#2-自增、自减运算符\" class=\"headerlink\" title=\"2.自增、自减运算符\"></a>2.自增、自减运算符</h2><p>C 语言提供两个运算符，对变量自身进行+ 1和- 1的操作</p>\n<ul>\n<li>++：自增运算符</li>\n<li>–：自减运算符</li>\n</ul>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">i++; &#x2F;&#x2F; 等同于 i &#x3D; i + 1\ni--; &#x2F;&#x2F; 等同于 i &#x3D; i - 1</code></pre>\n\n\n\n<h3 id=\"1-前置自增（减）运算符\"><a href=\"#1-前置自增（减）运算符\" class=\"headerlink\" title=\"1.前置自增（减）运算符\"></a>1.前置自增（减）运算符</h3><p>前置运算——运算符都放在变量之前：<code>++变量名</code>、<code>--变量名</code>，如<code>++i</code> <code>--i</code>。它先使变量的值增或减1，再以变化后的值参与其他运算，即先自增（或先自减）后运算。</p>\n<h3 id=\"2-后置自增（减）运算符\"><a href=\"#2-后置自增（减）运算符\" class=\"headerlink\" title=\"2.后置自增（减）运算符\"></a>2.后置自增（减）运算符</h3><p>后置运算——运算符放在变量之后：<code>变量名--</code>， <code>变量名++</code>如：<code>i++</code> <code>i--</code>。它使变量先参与其他运算，再使变量的值增或减1，即先运算后自增（或后自增）。</p>\n<h3 id=\"3-常用运算符优先级\"><a href=\"#3-常用运算符优先级\" class=\"headerlink\" title=\"3.常用运算符优先级\"></a>3.常用运算符优先级</h3><table>\n<thead>\n<tr>\n<th align=\"center\">标记</th>\n<th align=\"center\">操作符</th>\n<th align=\"center\">类型</th>\n<th align=\"center\">优先级</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">++–</td>\n<td align=\"center\">自增、自减</td>\n<td align=\"center\">后缀</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">++–</td>\n<td align=\"center\">自增、自减</td>\n<td align=\"center\">前缀</td>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\">+-</td>\n<td align=\"center\">正号，负号</td>\n<td align=\"center\">单目</td>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\">*&#x2F;%</td>\n<td align=\"center\">乘、除、取余</td>\n<td align=\"center\">双目</td>\n<td align=\"center\">13</td>\n</tr>\n<tr>\n<td align=\"center\">+-</td>\n<td align=\"center\">加、减</td>\n<td align=\"center\">双目</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"center\">&#x3D;</td>\n<td align=\"center\">赋值</td>\n<td align=\"center\">双目</td>\n<td align=\"center\">2</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-关系运算符\"><a href=\"#3-关系运算符\" class=\"headerlink\" title=\"3.关系运算符\"></a>3.关系运算符</h2><ol>\n<li><code>&lt;</code> 小于</li>\n<li><code>&lt;=</code> 小于或等于</li>\n<li><code>&gt;</code> 大于运算符</li>\n<li><code>&gt;=</code> 大于或等于</li>\n<li><code>==</code> 等于</li>\n<li><code>!=</code>不等于</li>\n</ol>\n<p><img src=\"https://image.yunyuwu.cn/typecho/uploads/2023/03/2749187070.png\" alt=\"关系运算符优先级.png\"></p>\n<h2 id=\"4-逻辑表达式\"><a href=\"#4-逻辑表达式\" class=\"headerlink\" title=\"4.逻辑表达式\"></a>4.逻辑表达式</h2><h3 id=\"（1）逻辑运算符\"><a href=\"#（1）逻辑运算符\" class=\"headerlink\" title=\"（1）逻辑运算符\"></a>（1）逻辑运算符</h3><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">含义</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&amp;&amp;</td>\n<td align=\"center\">与</td>\n<td align=\"center\">逻辑与</td>\n</tr>\n<tr>\n<td align=\"center\">&#96;</td>\n<td align=\"center\"></td>\n<td align=\"center\">&#96;</td>\n</tr>\n<tr>\n<td align=\"center\">!</td>\n<td align=\"center\">非</td>\n<td align=\"center\">逻辑非</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://image.yunyuwu.cn/typecho/uploads/2023/03/1745464590.png\" alt=\"逻辑运算符优先级.png\"></p>\n<h3 id=\"（2）逻辑表达式\"><a href=\"#（2）逻辑表达式\" class=\"headerlink\" title=\"（2）逻辑表达式\"></a>（2）逻辑表达式</h3><table>\n<thead>\n<tr>\n<th align=\"center\">C语言</th>\n<th align=\"center\">计算机逻辑表达式的值</th>\n<th align=\"center\">判断量的真假</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">真</td>\n<td align=\"center\">1</td>\n<td align=\"center\">非0</td>\n</tr>\n<tr>\n<td align=\"center\">假</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th align=\"center\">标记</th>\n<th align=\"center\">操作符</th>\n<th align=\"center\">类型</th>\n<th align=\"center\">优先级</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>++</code> <code>--</code></td>\n<td align=\"center\">自增、自减</td>\n<td align=\"center\">后缀</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\"><code>++</code> <code>--</code></td>\n<td align=\"center\">自增、自减</td>\n<td align=\"center\">前缀</td>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\"><code>!</code></td>\n<td align=\"center\">逻辑非</td>\n<td align=\"center\">单目</td>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\"><code>+</code> <code>-</code></td>\n<td align=\"center\">正号、负号</td>\n<td align=\"center\">单目</td>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\"><code>*</code> <code>/</code> <code>%</code></td>\n<td align=\"center\">乘、除、取余</td>\n<td align=\"center\">双目</td>\n<td align=\"center\">13</td>\n</tr>\n<tr>\n<td align=\"center\"><code>+</code> <code>-</code></td>\n<td align=\"center\">加、减</td>\n<td align=\"center\">双目</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&lt;</code> <code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code></td>\n<td align=\"center\">关系</td>\n<td align=\"center\">双目</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td align=\"center\"><code>==</code> <code>!=</code></td>\n<td align=\"center\">逻辑与</td>\n<td align=\"center\">双目</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">&#96;</td>\n<td align=\"center\"></td>\n<td align=\"center\">&#96;</td>\n<td align=\"center\">逻辑或</td>\n</tr>\n<tr>\n<td align=\"center\"><code>?:</code></td>\n<td align=\"center\">条件</td>\n<td align=\"center\">三目</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\"><code>=</code></td>\n<td align=\"center\">赋值</td>\n<td align=\"center\">双目</td>\n<td align=\"center\">2</td>\n</tr>\n</tbody></table>\n","text":"一、表达式1.表达式是什么一个或多个运算对象与零个或多个运算符组成的式子叫做表达式。 每个表达式都有一个结果 printf(&quot;%d\\n&quot; 5+10); &#x2F;&#x2F;表达式结果为：15 2.表达式语句在表达式后边加上;就构成了表达式语句，C语言中表达...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Note","slug":"Note","count":16,"path":"api/categories/Note.json"},{"name":"c语言","slug":"Note/c语言","count":7,"path":"api/categories/Note/c语言.json"}],"tags":[{"name":"Note","slug":"Note","count":14,"path":"api/tags/Note.json"},{"name":"c语言","slug":"c语言","count":7,"path":"api/tags/c语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">一、表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">1.表达式是什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.表达式语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">二、运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.算术运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89\"><span class=\"toc-text\">（1）+ -</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-%E4%B9%98%E6%B3%95%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">（2）*乘法运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89-%E9%99%A4%E6%B3%95%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">（3）&#x2F;除法运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%884%EF%BC%89-%E6%B1%82%E4%BD%99%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88%E5%8F%96%E6%A8%A1%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%89\"><span class=\"toc-text\">（4）%求余运算符（取模运算符）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%885%EF%BC%89%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%9A%84%E7%AE%80%E5%86%99%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">（5）赋值运算的简写形式</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E8%87%AA%E5%A2%9E%E3%80%81%E8%87%AA%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">2.自增、自减运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E7%BD%AE%E8%87%AA%E5%A2%9E%EF%BC%88%E5%87%8F%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.前置自增（减）运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%90%8E%E7%BD%AE%E8%87%AA%E5%A2%9E%EF%BC%88%E5%87%8F%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">2.后置自增（减）运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E7%94%A8%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">3.常用运算符优先级</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">3.关系运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">4.逻辑表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">（1）逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">（2）逻辑表达式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"小北","slug":"blog-author","avatar":"https://q1.qlogo.cn/g?b=qq&nk=2149264593&s=640","link":"/","description":"云起云散雾不止 <br /> @ <b>公众号：云与雾科技</b>","socials":{"github":"https://github.com/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/","customs":{}}},"mapped":true,"prev_post":{"title":"C语言笔记（5）数据类型篇","uid":"9d1cbcb9ab38a6720c0a25e1f37ef388","slug":"C语言笔记（5）数据类型篇","date":"2023-04-26T02:05:57.000Z","updated":"2023-04-26T06:19:36.292Z","comments":true,"path":"api/articles/C语言笔记（5）数据类型篇.json","keywords":null,"cover":"https://img1.imgtp.com/2023/04/26/EefkVrV3.jpg","text":"基本数据类型C 语言的每一种数据，都是有类型（type）的，编译器必须知道数据的类型，才能操作数据。所谓“类型”，就是相似的数据所拥有的共同特征，那么一旦知道某个值的数据类型，就能知道该值的特征和操作方式。 基本数据类型有三种：字符（char）、整数（int）和浮点数（float...","link":"","photos":[],"count_time":{"symbolsCount":223,"symbolsTime":"1 mins."},"categories":[{"name":"Note","slug":"Note","count":16,"path":"api/categories/Note.json"},{"name":"c语言","slug":"Note/c语言","count":7,"path":"api/categories/Note/c语言.json"}],"tags":[{"name":"Note","slug":"Note","count":14,"path":"api/tags/Note.json"},{"name":"c语言","slug":"c语言","count":7,"path":"api/tags/c语言.json"}],"author":{"name":"小北","slug":"blog-author","avatar":"https://q1.qlogo.cn/g?b=qq&nk=2149264593&s=640","link":"/","description":"云起云散雾不止 <br /> @ <b>公众号：云与雾科技</b>","socials":{"github":"https://github.com/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/","customs":{}}}},"next_post":{"title":"C语言笔记（3）变量及常量篇","uid":"73b463ad631cb31a8944de1994830c80","slug":"C语言笔记（3）变量及常量篇","date":"2023-04-26T01:54:18.000Z","updated":"2023-04-26T06:19:36.348Z","comments":true,"path":"api/articles/C语言笔记（3）变量及常量篇.json","keywords":null,"cover":"https://image.yunyuwu.cn/typecho/uploads/2022/02/1888138218.jpg","text":"一、变量1. 变量的概念变量就是可以变化的量，而每个变量都会有一个名字（标识符）。变量占据内存中一定的存储单元。使用变量之前必须先定义变量，要区分变量名和变量值是两个不同的概念。 现实生活中我们会找一个小箱子来存放物品，一来显得不那么凌乱，二来方便以后找到。计算机也是这个道理，我...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"Note","slug":"Note","count":16,"path":"api/categories/Note.json"},{"name":"c语言","slug":"Note/c语言","count":7,"path":"api/categories/Note/c语言.json"}],"tags":[{"name":"Note","slug":"Note","count":14,"path":"api/tags/Note.json"},{"name":"c语言","slug":"c语言","count":7,"path":"api/tags/c语言.json"}],"author":{"name":"小北","slug":"blog-author","avatar":"https://q1.qlogo.cn/g?b=qq&nk=2149264593&s=640","link":"/","description":"云起云散雾不止 <br /> @ <b>公众号：云与雾科技</b>","socials":{"github":"https://github.com/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/","customs":{}}}}}